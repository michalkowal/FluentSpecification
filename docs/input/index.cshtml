Title: Home
NoSidebar: true
NoContainer: true
NoGutter: true
---
<div class="jumbotron">
    <div class="container">
        <h1 class="no-anchor">.NET implementation of Specification design pattern</h1>
        <p><b>FluentSpecification</b> is implementation of <i>Specification design pattern</i> with many small, built-in reusable specifications, 
        perfect for validation of <i>Domain Model</i> in <i>Domain-Driven-Design</i> approach and other similar, where system is built around domain objects.</p>
        <p>
            <a class="btn btn-primary btn-lg" href="docs/usage/building-specifications" role="button">Get Started &raquo;</a>
        </p>
    </div>
</div>

<div class="container"> 
	<div class="col-md-4">
		<h2 class="feature no-anchor"><i class="fa fa-cogs"></i> Fluent API</h2>
		<p>Allows to build and combine specifications in simple and clear way.</p>
	</div>
	<div class="col-md-4">
		<h2 class="feature no-anchor"><i class="fa fa-clipboard"></i> Built-in specifications</h2>
		<p>With validation and <i>Linq expression</i> support. Many of them available as negation.</p>
	</div>
	<div class="col-md-4">
		<h2 class="feature no-anchor"><i class="fa fa-check-circle"></i> Objects validation</h2>
		<p>Special result with error messages, trace of all used specifications, specifications parameters etc. 
        Can be used not only for domain, but also for DTOs and user input, when you need to log result or present it on UI.</p>
	</div>
	<div class="col-md-4">
		<h2 class="feature no-anchor"><i class="fa fa-link"></i> Linq expression</h2>
		<p>Specifications can be used in collections querying. Business logic of repositories can be separated to specifications and use interchangeably.</p>
	</div>
	<div class="col-md-4">
		<h2 class="feature no-anchor"><i class="fa fa-database"></i> EF Core support</h2>
		<p>All specifications are tested with <i>EF Core</i> on real database and ca be used without errors.</p>
	</div>
	<div class="col-md-4">
		<h2 class="feature no-anchor"><i class="fa fa-bolt"></i> EF 6 partial support</h2>
		<p>Many of specifications support <i>LinqToEntities</i> (<i>LinqToSql</i>) and can be used in <i>Entity Framework 6</i> queries.</p>
	</div>
</div>

<div class="container">
    <h1>Usage</h1>
    <hr />
<pre><?# highlight csharp ?>
using FluentSpecification;
using FluentSpecification.Core;

var customerSpec = Specification
    // Specify not null Customer
    .NotNull&lt;Customer&gt;()

    // with Id between 100 and 200
    .And()
    .InclusiveBetween(c =&gt; c.CustomerId, 100, 200)

    // and LastName is "Smith"
    .And()
    .Equal(c =&gt; c.LastName, "Smith")

    // and Customer is active
    .And()
    .True(c =&gt; c.IsActive)

    // and Customer property "Email" is ...
    .And(Specification.ForProperty&lt;Customer, string&gt;(c =&gt; c.Email, Specification
        // ... valid email
        .Email()

        // longer than 15 characters
        .And()
        .MinLength(15)

        // on "gmail.com"
        .And()
        .Match("^.*&#64;gmail.com$")))

    // with not empty Item collection ...
    .And()
    .ForProperty(c =&gt; c.Items, Specification
        .NotEmpty&lt;ICollection&lt;Item&gt;&gt;()

        // ... contains Item '1000'
        .And()
        .Contains(new Item { ItemId = 1000 }))

    // and Customer has credit card ...
    .And()
    .NotNull(c =&gt; c.CreditCard)

    // ... with valid number
    .And()
    .CreditCard(c =&gt; c.CreditCard.CardNumber)

    // and credit card is valid between 2019-03-12 ...
    .And(Specification
        .GreaterThanOrEqual&lt;Customer, DateTime&gt;(c =&gt; c.CreditCard.ValidityDate, 
            new DateTime(2019, 3, 12))
        
        // ... and 2019-05-31
        .Or()
        .LessThan(c =&gt; c.CreditCard.ValidityDate, new DateTime(2019, 6, 1)));
<?#/ highlight ?></pre>

    <h2>Is satisfied by</h2>
<pre><?# highlight csharp ?>
customerSpec.IsSatisfiedBy(new Customer
{
    CustomerId = 125,
    LastName = "Smith",
    IsActive = true,
    Email = "asmith&#64;gmail.com",
    Items = new List<Item>()
    {
        new Item { ItemId = 1000 }
    },
    CreditCard = new CreditCard
    {
        CardNumber = "5500 0000 0000 0004",
        ValidityDate = DateTime.Parse("2019-03-12")
    }
}); // return true
<?#/ highlight ?></pre>

    <h2>Validation</h2>
<pre><?# highlight csharp ?>
customerSpec.IsSatisfiedBy(new Customer
{
    CustomerId = 90,
    LastName = "Jones",
    IsActive = false,
    Email = "mjones&#64;hotmail.com",
    Items = null,
    CreditCard = new CreditCard
    {
        CardNumber = "5500 0000 1",
        ValidityDate = DateTime.Parse("2019-03-01")
    }
}, out var specResult);    // return false

Console.WriteLine(specResult.ToString());
// Field 'CustomerId' value is not valid
// Field 'CustomerId': [Value is not between [100] and [200]]
// Field 'LastName' value is not valid
// Field 'LastName': [Object is not equal to [Smith]]
// Field 'IsActive' value is not valid
// Field 'IsActive': [Value is False]
// Field 'Email' value is not valid
// Field 'Email': [String not match pattern [^.*&#64;gmail.com$]]
// Field 'Items' value is not valid
// Field 'Items': [Object is empty]
// Field 'Items': [Collection not contains [FluentSpecification.Integration.Tests.Data.Item]]
// Field 'CreditCard.CardNumber' value is not valid
// Field 'CreditCard.CardNumber': [Value is not correct credit card number]
<?#/ highlight ?></pre>

    <h2>Querying</h2>
<pre><?# highlight csharp ?>
var customers = new List&lt;Customer&gt;()
{
    // fill customers
};
var result = customers
    .Where(customerSpec.AsPredicate()).ToList();

var dbResult = Context.Customers
    .Where(customerSpec.GetExpression()).ToList();    // Or customerSpec.AsExpression()
<?#/ highlight ?></pre>

    <h2>Translations / Custom messages</h2>
<pre><?# highlight csharp ?>
// Single error message for whole specifications chain
customerSpec
    .WithMessage("Validation failed: Incorrect Customer")
    .IsSatisfiedBy(new Customer
    {
        CustomerId = 90,
        LastName = "Jones",
        IsActive = false,
        Email = "mjones&#64;hotmail.com",
        Items = null,
        CreditCard = new CreditCard
        {
            CardNumber = "5500 0000 1",
            ValidityDate = DateTime.Parse("2019-03-01")
        }
    }, out var specResult);    // return false

Console.WriteLine(specResult.ToString());
// Validation failed: Incorrect Customer


// Custom messages for each specification
var idSpec = Specification
    .NotEmpty&lt;Customer, int&gt;(c =&gt; c.CustomerId)
    .WithMessage("Unknown Customer ID");

var activeSpec = Specification
    .True&lt;Customer&gt;(c =&gt; c.IsActive)
    .WithMessage("Customer is archived");

idSpec.And(activeSpec)
    .IsSatisfiedBy(new Customer(), out var specResult);    // return false

Console.WriteLine(specResult.ToString());
// Unknown Customer ID
// Customer is archived
<?#/ highlight ?></pre>
</div>

<br />
<div class="container">
    <a href="https://github.com/michalkowal/FluentSpecification/blob/master/LICENSE">
    <img src="https://img.shields.io/github/license/michalkowal/FluentSpecification.svg?color=%23545894&style=popout-square&logo=apache&logoColor=%23D22128" alt="License" /></a>
</div>